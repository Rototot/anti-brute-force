// Code generated by MockGen. DO NOT EDIT.
// Source: WhiteListIPRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/Rototot/anti-brute-force/pkg/domain/entities"
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockWhiteListIPRepository is a mock of WhiteListIPRepository interface
type MockWhiteListIPRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWhiteListIPRepositoryMockRecorder
}

// MockWhiteListIPRepositoryMockRecorder is the mock recorder for MockWhiteListIPRepository
type MockWhiteListIPRepositoryMockRecorder struct {
	mock *MockWhiteListIPRepository
}

// NewMockWhiteListIPRepository creates a new mock instance
func NewMockWhiteListIPRepository(ctrl *gomock.Controller) *MockWhiteListIPRepository {
	mock := &MockWhiteListIPRepository{ctrl: ctrl}
	mock.recorder = &MockWhiteListIPRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWhiteListIPRepository) EXPECT() *MockWhiteListIPRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockWhiteListIPRepository) Add(ip *entities.WhiteListIP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockWhiteListIPRepositoryMockRecorder) Add(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWhiteListIPRepository)(nil).Add), ip)
}

// Remove mocks base method
func (m *MockWhiteListIPRepository) Remove(ip *entities.WhiteListIP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockWhiteListIPRepositoryMockRecorder) Remove(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockWhiteListIPRepository)(nil).Remove), ip)
}

// FindOneBySubnet mocks base method
func (m *MockWhiteListIPRepository) FindOneBySubnet(subnet net.IPNet) (*entities.WhiteListIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneBySubnet", subnet)
	ret0, _ := ret[0].(*entities.WhiteListIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneBySubnet indicates an expected call of FindOneBySubnet
func (mr *MockWhiteListIPRepositoryMockRecorder) FindOneBySubnet(subnet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneBySubnet", reflect.TypeOf((*MockWhiteListIPRepository)(nil).FindOneBySubnet), subnet)
}

// FindAll mocks base method
func (m *MockWhiteListIPRepository) FindAll() ([]*entities.WhiteListIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entities.WhiteListIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockWhiteListIPRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockWhiteListIPRepository)(nil).FindAll))
}
