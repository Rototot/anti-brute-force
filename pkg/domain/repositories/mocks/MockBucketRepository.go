// Code generated by MockGen. DO NOT EDIT.
// Source: BucketRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/Rototot/anti-brute-force/pkg/domain/entities"
	valueobjects "github.com/Rototot/anti-brute-force/pkg/domain/valueobjects"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBucketRepository is a mock of BucketRepository interface
type MockBucketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBucketRepositoryMockRecorder
}

// MockBucketRepositoryMockRecorder is the mock recorder for MockBucketRepository
type MockBucketRepositoryMockRecorder struct {
	mock *MockBucketRepository
}

// NewMockBucketRepository creates a new mock instance
func NewMockBucketRepository(ctrl *gomock.Controller) *MockBucketRepository {
	mock := &MockBucketRepository{ctrl: ctrl}
	mock.recorder = &MockBucketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBucketRepository) EXPECT() *MockBucketRepositoryMockRecorder {
	return m.recorder
}

// AddDrip mocks base method
func (m *MockBucketRepository) AddDrip(bucket *entities.Bucket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDrip", bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDrip indicates an expected call of AddDrip
func (mr *MockBucketRepositoryMockRecorder) AddDrip(bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDrip", reflect.TypeOf((*MockBucketRepository)(nil).AddDrip), bucket)
}

// CountDrips mocks base method
func (m *MockBucketRepository) CountDrips(bucket *entities.Bucket) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDrips", bucket)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountDrips indicates an expected call of CountDrips
func (mr *MockBucketRepositoryMockRecorder) CountDrips(bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDrips", reflect.TypeOf((*MockBucketRepository)(nil).CountDrips), bucket)
}

// Remove mocks base method
func (m *MockBucketRepository) Remove(id valueobjects.BucketID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockBucketRepositoryMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBucketRepository)(nil).Remove), id)
}
