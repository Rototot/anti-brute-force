// Code generated by MockGen. DO NOT EDIT.
// Source: BlackListIPRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/Rototot/anti-brute-force/pkg/domain/entities"
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockBlackListIPRepository is a mock of BlackListIPRepository interface
type MockBlackListIPRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlackListIPRepositoryMockRecorder
}

// MockBlackListIPRepositoryMockRecorder is the mock recorder for MockBlackListIPRepository
type MockBlackListIPRepositoryMockRecorder struct {
	mock *MockBlackListIPRepository
}

// NewMockBlackListIPRepository creates a new mock instance
func NewMockBlackListIPRepository(ctrl *gomock.Controller) *MockBlackListIPRepository {
	mock := &MockBlackListIPRepository{ctrl: ctrl}
	mock.recorder = &MockBlackListIPRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlackListIPRepository) EXPECT() *MockBlackListIPRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockBlackListIPRepository) Add(ip *entities.BlackListIP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockBlackListIPRepositoryMockRecorder) Add(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBlackListIPRepository)(nil).Add), ip)
}

// Remove mocks base method
func (m *MockBlackListIPRepository) Remove(ip *entities.BlackListIP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockBlackListIPRepositoryMockRecorder) Remove(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBlackListIPRepository)(nil).Remove), ip)
}

// FindBySubnet mocks base method
func (m *MockBlackListIPRepository) FindBySubnet(subnet net.IPNet) (*entities.BlackListIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySubnet", subnet)
	ret0, _ := ret[0].(*entities.BlackListIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySubnet indicates an expected call of FindBySubnet
func (mr *MockBlackListIPRepositoryMockRecorder) FindBySubnet(subnet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySubnet", reflect.TypeOf((*MockBlackListIPRepository)(nil).FindBySubnet), subnet)
}

// FindAll mocks base method
func (m *MockBlackListIPRepository) FindAll() ([]*entities.BlackListIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entities.BlackListIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockBlackListIPRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockBlackListIPRepository)(nil).FindAll))
}
